#+TITLE:    Org-mode and julia: an introduction
#+AUTHOR:   G. Jay Kerns
#+EMAIL:    gkerns@ysu.edu
#+OPTIONS:  H:2
#+PROPERTY: exports both
#+PROPERTY: results output
#+PROPERTY: session *julia*
#+PROPERTY: tangle yes
#+LaTeX_HEADER: \DeclareUnicodeCharacter{22EE}{â‹®}

One of the reasons for this document is that I wanted to make it easier to get acquainted with =julia=.  

* What you need to get started

This document assumes you have at least a passing familiarity with Org-mode and Emacs keybindings.  

#+BEGIN_SRC emacs-lisp :results silent :eval no-export
(load "/path/to/ob-julia.el")
(org-babel-julia-initiate-session "*julia*" nil)
#+END_SRC

- Note: :: a lot of the code blocks below have the header argument =:eval no-export= which means that the code block can be evaluated interactively in this session by =C-c C-c= with point in the code block but will /not/ be evaluated during export.  The reason is that those blocks have settings which conflict with my current setup but would be useful for others going through this document. 

** Julia
- First install takes the longest, later updates not so bad.
- all the dependencies

** Add-on packages

Based on [[http://www.johnmyleswhite.com/notebook/2012/12/02/the-state-of-statistics-in-julia/][The State of Statistics in Julia]] by John Myles White.

#+BEGIN_SRC julia :eval never
Pkg.add("DataFrames", "Distributions", "GLM", "MCMC", "Optim", 
        "NHST", "Clustering")
#+END_SRC

#+BEGIN_SRC julia :eval never
Pkg.add("RDatasets")
#+END_SRC


*** Winston

The most stable and fully featured of the =julia= graphics packages at the time of this writing appears to be the =Winston= package, among alternatives including =Gadfly=.

#+BEGIN_SRC julia :eval never
Pkg.add("Winston")
#+END_SRC

The Winston package has lots of dependencies and many of them must be built from source (on Ubuntu).

*** Gadfly

#+BEGIN_SRC julia :eval never
Pkg.add("Gadfly")
#+END_SRC

- packages take a lot longer to load than R

** Org-mode

This document assumes that you have at least a passing familiarity with org-mode such that you likely have something like the following already in your =.emacs=:

#+BEGIN_SRC emacs-lisp :eval never
(require 'org)
#+END_SRC

Another handy setting to have is

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

In order to run this org file you will need to load =ob-julia.el= at some point. One way is to edit the following code block and then =C-c C-c= with point inside the block:

#+BEGIN_SRC emacs-lisp :results silent :eval no-export
(load "/path/to/ob-julia.el")
(org-babel-julia-initiate-session "*julia*" nil)
#+END_SRC

The first command loads the =ob-julia.el= file and the second initiates a =julia= session in a buffer called =*julia*=.  An alternative method is to put the following in your =.emacs= (these should go below the =(require 'org)= line):

#+BEGIN_SRC emacs-lisp :eval no-export
(add-to-list 'load-path "/path/to/ob-julia.el")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (julia . t)))
#+END_SRC

The following lines (either here or in your =.emacs=) allow for inline image display in the Emacs buffer.

#+BEGIN_SRC emacs-lisp :eval no-export
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)   
(add-hook 'org-mode-hook 'org-display-inline-images)
#+END_SRC

If you'd like to do LaTeX export then put the following in your emacs.

#+BEGIN_SRC emacs-lisp :eval never
(require 'ox-latex)
(require 'ox-beamer)
#+END_SRC

** ESS - Emacs Speaks Statistics

The place to get the latest version of ESS is [[http://stat.ethz.ch/ESS/index.php?Section=download][here]].  

#+BEGIN_SRC emacs-lisp :eval never
(add-to-list 'load-path "/path/to/ESS/lisp")
(require 'ess-site)
#+END_SRC

#+BEGIN_SRC emacs-lisp :eval never
(setq  inferior-julia-program-name "/path/to/julia-release-basic")
#+END_SRC

* Fitting (generalized) linear models

#+BEGIN_SRC julia
using RDatasets, DataFrames, Distributions, GLM
trees = data("datasets", "trees");
treeslm = lm(:(Girth ~ Height + Volume), trees);
coef(treeslm)
coeftable(treeslm)
#+END_SRC

#+RESULTS:
#+begin_example
3-element Float64 Array:
 10.8164   
 -0.0454835
  0.19518
3x4 DataFrame:
          Estimate Std.Error  t value   Pr(>|t|)
[1,]       10.8164    1.9732  5.48165 7.44691e-6
[2,]    -0.0454835 0.0282621 -1.60935   0.118759
[3,]       0.19518 0.0109553  17.8161 8.2233e-17
#+end_example



* Installation prerequisites

** Org-mode

** ESS

** julia

* Interactive session evaluation

This is about ESS.

* Evaluation inside the Org buffer

** :results value 

** :results output

* Graphics

** Plotting with Winston

#+BEGIN_SRC julia :results graphics :file example1.png :eval no-export
using Winston
x = linspace( 0, 3pi, 100 )
c = cos(x)
s = sin(x)
p = FramedPlot();
setattr(p, "title", "title!")
setattr(p, "xlabel", L"\Sigma x^2_i")
setattr(p, "ylabel", L"\Theta_i")
add(p, FillBetween(x, c, x, s) )
add(p, Curve(x, c, "color", "red") )
add(p, Curve(x, s, "color", "blue") )
file(p, "example1.png")
#+END_SRC

#+RESULTS:
[[file:example1.png]]


** Plotting with Gadfly

#+BEGIN_SRC julia :results graphics :file iris_plot.svg :eval never
using RDatasets
using Gadfly
using Compose
iris = data("datasets", "iris")
p = plot(iris, {:x => "Sepal.Length", :y => "Sepal.Width"}, Geom.point);
SVG("iris_plot.svg", 6inch, 4inch)
#+END_SRC


* Exporting to other formats

** LaTeX

** HTML

** Beamer

* Other things

- empty lines in output for semicoloned lines
- need to start session first
- when :results value be careful because of readcsv
  - characters
  - 1x1 matrix
